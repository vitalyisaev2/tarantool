net_box = require('net.box')
---
...
-- Prepare spaces
box.schema.user.create('test', { password = 'test' })
---
...
box.schema.user.grant('test', 'execute,read,write', 'universe')
---
...
s = box.schema.space.create('tweedledum', { id = 0 })
---
...
index1 = s:create_index('primary', { type = 'tree', parts = { 1, 'str'} })
---
...
index2 = s:create_index('secondary', { type = 'tree', unique = false, parts = {2, 'str'}})
---
...
function compare(a,b) return a[1] < b[1] end
---
...
conn = net_box:new('test:test@' .. box.cfg.listen)
---
...
space = conn.space.tweedledum
---
...
-- A test case for Bug#729758
-- "SELECT fails with a disjunct and small LIMIT"
-- https://bugs.launchpad.net/tarantool/+bug/729758
space:insert{'Doe', 'Richard'}
---
- ['Doe', 'Richard']
...
space:insert{'Roe', 'Richard'}
---
- ['Roe', 'Richard']
...
space:insert{'Woe', 'Richard'}
---
- ['Woe', 'Richard']
...
space:insert{'Major', 'Tomas'}
---
- ['Major', 'Tomas']
...
space:insert{'Kytes', 'Tomas'}
---
- ['Kytes', 'Tomas']
...
sorted(space.index.secondary:select('Richard'))
---
- - ['Doe', 'Richard']
  - ['Roe', 'Richard']
  - ['Woe', 'Richard']
...
-- A test case for Bug#729879
-- "Zero limit is treated the same as no limit"
-- https://bugs.launchpad.net/tarantool/+bug/729879
sorted(space.index.secondary:select('Richard', { limit = 0 }))
---
- []
...
s:truncate()
---
...
-- A test case for Bug#730593
-- "Bad data if incomplete tuple"
-- https://bugs.launchpad.net/tarantool/+bug/730593
-- Verify that if there is an index on, say, field 2,
-- we can't insert tuples with cardinality 1 and
-- get away with it.
space:insert{'Britney'}
---
- error: Tuple field count 1 is less than required by a defined index (expected 2)
...
sorted(space.index.secondary:select('Anything'))
---
- []
...
space:insert{'Stephanie'}
---
- error: Tuple field count 1 is less than required by a defined index (expected 2)
...
sorted(space.index.secondary:select('Anything'))
---
- []
...
space:insert{'Spears', 'Britney'}
---
- ['Spears', 'Britney']
...
space:select{'Spears'}
---
- - ['Spears', 'Britney']
...
sorted(space.index.secondary:select('Anything'))
---
- []
...
sorted(space.index.secondary:select('Britney'))
---
- - ['Spears', 'Britney']
...
s.index[0]:select('Spears', { limit = 100, iterator = 'GE' })
---
- - ['Spears', 'Britney']
...
s.index[1]:select('Britney', { limit = 100, iterator = 'GE' })
---
- - ['Spears', 'Britney']
...
space:delete('Spears')
---
- ['Spears', 'Britney']
...
-- Cleanup
s:truncate()
---
...
-- Test composite keys with trees
-- Redefine the second key to be composite
s.index.secondary:alter{unique = true, parts = { 2, 'str', 3, 'str'}}
---
...
space:insert{'key1', 'part1', 'part2'}
---
- ['key1', 'part1', 'part2']
...
-- Test a duplicate insert on unique index that once resulted in a crash (bug 926080)
space:replace{'key1', 'part1', 'part2'}
---
- ['key1', 'part1', 'part2']
...
space:insert{'key2', 'part1', 'part2_a'}
---
- ['key2', 'part1', 'part2_a']
...
space:insert{'key3', 'part1', 'part2_b'}
---
- ['key3', 'part1', 'part2_b']
...
s.index[1]:select{}
---
- - ['key1', 'part1', 'part2']
  - ['key2', 'part1', 'part2_a']
  - ['key3', 'part1', 'part2_b']
...
space:select{'key1'}
---
- - ['key1', 'part1', 'part2']
...
space:select{'key2'}
---
- - ['key2', 'part1', 'part2_a']
...
space:select{'key3'}
---
- - ['key3', 'part1', 'part2_b']
...
sorted(space.index.secondary:select('part1'))
---
- - ['key1', 'part1', 'part2']
  - ['key2', 'part1', 'part2_a']
  - ['key3', 'part1', 'part2_b']
...
s.index[1]:select('part1', { limit = 100, iterator = 'GE' })
---
- - ['key1', 'part1', 'part2']
  - ['key2', 'part1', 'part2_a']
  - ['key3', 'part1', 'part2_b']
...
s.index[0]:select('key2', { limit = 100, iterator = 'GE' })
---
- - ['key2', 'part1', 'part2_a']
  - ['key3', 'part1', 'part2_b']
...
s.index[1]:select({ 'part1', 'part2_a' }, { limit = 1, iterator = 'GE' })
---
- - ['key2', 'part1', 'part2_a']
...
space:select{'key1'}
---
- - ['key1', 'part1', 'part2']
...
space:select{'key2'}
---
- - ['key2', 'part1', 'part2_a']
...
space:select{'key3'}
---
- - ['key3', 'part1', 'part2_b']
...
sorted(space.index.secondary:select('part1'))
---
- - ['key1', 'part1', 'part2']
  - ['key2', 'part1', 'part2_a']
  - ['key3', 'part1', 'part2_b']
...
space:delete('key1')
---
- ['key1', 'part1', 'part2']
...
space:delete('key2')
---
- ['key2', 'part1', 'part2_a']
...
space:delete('key3')
---
- ['key3', 'part1', 'part2_b']
...
s:truncate()
---
...
-- check non-unique multipart keys
s.index.primary:alter{type = 'tree', parts = { 1, 'num'}}
---
...
s.index.secondary:alter{unique = false}
---
...
space:insert{1234567, 'part1', 'part2'}
---
- [1234567, 'part1', 'part2']
...
space:insert{11234567, 'part1', 'part2'}
---
- [11234567, 'part1', 'part2']
...
space:insert{21234567, 'part1', 'part2_a'}
---
- [21234567, 'part1', 'part2_a']
...
space:insert{31234567, 'part1_a', 'part2'}
---
- [31234567, 'part1_a', 'part2']
...
space:insert{41234567, 'part1_a', 'part2_a'}
---
- [41234567, 'part1_a', 'part2_a']
...
l = {}
---
...
for state, v in s:pairs() do table.insert(l, v) end
---
...
l
---
- - [1234567, 'part1', 'part2']
  - [11234567, 'part1', 'part2']
  - [21234567, 'part1', 'part2_a']
  - [31234567, 'part1_a', 'part2']
  - [41234567, 'part1_a', 'part2_a']
...
space:select{1234567}
---
- - [1234567, 'part1', 'part2']
...
space:select{11234567}
---
- - [11234567, 'part1', 'part2']
...
space:select{21234567}
---
- - [21234567, 'part1', 'part2_a']
...
sorted(space.index.secondary:select('part1'))
---
- - [1234567, 'part1', 'part2']
  - [11234567, 'part1', 'part2']
  - [21234567, 'part1', 'part2_a']
...
sorted(space.index.secondary:select('part1_a'))
---
- - [31234567, 'part1_a', 'part2']
  - [41234567, 'part1_a', 'part2_a']
...
sorted(space.index.secondary:select('part_none'))
---
- []
...
sorted(box.space[0].index[1]:select({'part1', 'part2'}))
---
- - [1234567, 'part1', 'part2']
  - [11234567, 'part1', 'part2']
...
sorted(space.index.secondary:select('part1'))
---
- - [1234567, 'part1', 'part2']
  - [11234567, 'part1', 'part2']
  - [21234567, 'part1', 'part2_a']
...
sorted(space.index.secondary:select('part2'))
---
- []
...
-- cleanup
space:delete(1234567)
---
- [1234567, 'part1', 'part2']
...
space:delete(11234567)
---
- [11234567, 'part1', 'part2']
...
space:delete(21234567)
---
- [21234567, 'part1', 'part2_a']
...
space:delete(31234567)
---
- [31234567, 'part1_a', 'part2']
...
space:delete(41234567)
---
- [41234567, 'part1_a', 'part2_a']
...
s:select{}
---
- []
...
s:truncate()
---
...
s.index.primary:alter{type = 'hash'}
---
...
s.index.secondary:alter{type = 'hash', unique = true, parts = { 2, 'str' }}
---
...
space:insert{1, 'hello'}
---
- [1, 'hello']
...
space:insert{2, 'brave'}
---
- [2, 'brave']
...
space:insert{3, 'new'}
---
- [3, 'new']
...
space:insert{4, 'world'}
---
- [4, 'world']
...
env = require('test_run')
---
...
test_run = env.new()
---
...
-- Check how build_indexes() works
test_run:cmd('restart server default')
net_box = require('net.box')
---
...
conn = net_box:new('test:test@' .. box.cfg.listen)
---
...
space = conn.space.tweedledum
---
...
s = box.space[0]
---
...
-- Bug#929654 - secondary hash index is not built with build_indexes()
sorted(space.index.secondary:select('hello'))
---
- - [1, 'hello']
...
sorted(space.index.secondary:select('brave'))
---
- - [2, 'brave']
...
sorted(space.index.secondary:select('new'))
---
- - [3, 'new']
...
sorted(space.index.secondary:select('world'))
---
- - [4, 'world']
...
s:truncate()
---
...
-- A test case for: http://bugs.launchpad.net/bugs/735140
-- Partial REPLACE corrupts index.
-- clean data and restart with appropriate config
s.index.primary:alter{parts = {1, 'str'}}
---
...
s.index.secondary:alter{type = 'tree', unique = false}
---
...
space:insert{'Spears', 'Britney'}
---
- ['Spears', 'Britney']
...
space:select{'Spears'}
---
- - ['Spears', 'Britney']
...
sorted(space.index.secondary:select('Britney'))
---
- - ['Spears', 'Britney']
...
-- try to insert the incoplete tuple
space:replace{'Spears'}
---
- error: Tuple field count 1 is less than required by a defined index (expected 2)
...
-- check that nothing has been updated
space:select{'Spears'}
---
- - ['Spears', 'Britney']
...
-- cleanup
space:delete('Spears')
---
- ['Spears', 'Britney']
...
-- Test retrieval of duplicates via a secondary key
s.index.primary:alter{parts = { 1, 'num'}}
---
...
space:insert{1, 'duplicate one'}
---
- [1, 'duplicate one']
...
space:insert{2, 'duplicate one'}
---
- [2, 'duplicate one']
...
space:insert{3, 'duplicate one'}
---
- [3, 'duplicate one']
...
space:insert{4, 'duplicate one'}
---
- [4, 'duplicate one']
...
space:insert{5, 'duplicate one'}
---
- [5, 'duplicate one']
...
space:insert{6, 'duplicate two'}
---
- [6, 'duplicate two']
...
space:insert{7, 'duplicate two'}
---
- [7, 'duplicate two']
...
space:insert{8, 'duplicate two'}
---
- [8, 'duplicate two']
...
space:insert{9, 'duplicate two'}
---
- [9, 'duplicate two']
...
space:insert{10, 'duplicate two'}
---
- [10, 'duplicate two']
...
space:insert{11, 'duplicate three'}
---
- [11, 'duplicate three']
...
space:insert{12, 'duplicate three'}
---
- [12, 'duplicate three']
...
space:insert{13, 'duplicate three'}
---
- [13, 'duplicate three']
...
space:insert{14, 'duplicate three'}
---
- [14, 'duplicate three']
...
space:insert{15, 'duplicate three'}
---
- [15, 'duplicate three']
...
sorted(space.index.secondary:select('duplicate one'))
---
- - [1, 'duplicate one']
  - [2, 'duplicate one']
  - [3, 'duplicate one']
  - [4, 'duplicate one']
  - [5, 'duplicate one']
...
sorted(space.index.secondary:select('duplicate two'))
---
- - [6, 'duplicate two']
  - [7, 'duplicate two']
  - [8, 'duplicate two']
  - [9, 'duplicate two']
  - [10, 'duplicate two']
...
sorted(space.index.secondary:select('duplicate three'))
---
- - [11, 'duplicate three']
  - [12, 'duplicate three']
  - [13, 'duplicate three']
  - [14, 'duplicate three']
  - [15, 'duplicate three']
...
space:delete(1)
---
- [1, 'duplicate one']
...
space:delete(2)
---
- [2, 'duplicate one']
...
space:delete(3)
---
- [3, 'duplicate one']
...
space:delete(4)
---
- [4, 'duplicate one']
...
space:delete(5)
---
- [5, 'duplicate one']
...
space:delete(6)
---
- [6, 'duplicate two']
...
space:delete(7)
---
- [7, 'duplicate two']
...
space:delete(8)
---
- [8, 'duplicate two']
...
space:delete(9)
---
- [9, 'duplicate two']
...
space:delete(10)
---
- [10, 'duplicate two']
...
space:delete(11)
---
- [11, 'duplicate three']
...
space:delete(12)
---
- [12, 'duplicate three']
...
space:delete(13)
---
- [13, 'duplicate three']
...
space:delete(14)
---
- [14, 'duplicate three']
...
space:delete(15)
---
- [15, 'duplicate three']
...
-- Check min() and max() functions
space:insert{1, 'Aardvark '}
---
- [1, 'Aardvark ']
...
space:insert{2, 'Bilimbi'}
---
- [2, 'Bilimbi']
...
space:insert{3, 'Creature '}
---
- [3, 'Creature ']
...
s.index[1]:select{}
---
- - [1, 'Aardvark ']
  - [2, 'Bilimbi']
  - [3, 'Creature ']
...
s.index[0]:min()
---
- error: Index 'primary' (HASH) of space 'tweedledum' (memtx) does not support min()
...
s.index[0]:max()
---
- error: Index 'primary' (HASH) of space 'tweedledum' (memtx) does not support max()
...
s.index[1]:min()
---
- [1, 'Aardvark ']
...
s.index[1]:max()
---
- [3, 'Creature ']
...
space:delete(1)
---
- [1, 'Aardvark ']
...
space:delete(2)
---
- [2, 'Bilimbi']
...
space:delete(3)
---
- [3, 'Creature ']
...
box.schema.user.drop('test')
---
...
s:drop()
---
...
